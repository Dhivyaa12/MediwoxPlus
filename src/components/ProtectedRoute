// src/components/ProtectedRoute.tsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

interface ProtectedRouteProps {
  children: JSX.Element;
  allowedRoles?: ('patient' | 'doctor')[];
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children, allowedRoles }) => {
  const { user } = useAuth();
  const location = useLocation();

  // ðŸ›‘ Not logged in â†’ redirect to appropriate login page
  if (!user) {
    const defaultLogin = allowedRoles?.includes('doctor') ? '/doctor-login' : '/patient-login';
    return <Navigate to={`${defaultLogin}?redirectTo=${location.pathname}`} replace />;
  }

  // ðŸš« Logged in but unauthorized role â†’ redirect to home
  if (allowedRoles && !allowedRoles.includes(user.role)) {
    return <Navigate to="/" replace />;
  }

  // âœ… Allowed access
  return children;
};

export default ProtectedRoute;
